global def exampleScalaModule =
  makeScalaModuleFromJSON here "example"
  | setScalaModuleDeps (chisel3ScalaModule, Nil)
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

global def getVerilog outputLoc =
  def outputDir = mkdir "{outputLoc}"

  def firrtlOutputs =
    runJava exampleScalaModule.scalaModuleClasspath "example.Main" ("--output={outputLoc}", Nil) (outputDir, Nil)
    | getJobOutputs
  
  def firrtlOutput regExp =
    firrtlOutputs
    | filter (matches regExp _.getPathName)
    | head
    | getOrElse "firrtl didn't generate a file matching {regExpToString regExp}!".makeError.makeBadPath

  def firrtlFile = firrtlOutput `.*\.fir`
  def annoFile = firrtlOutput `.*\.anno\.json`

  def firrtlOptions = 
    "-tn","DoublePassthrough",
    "-i","{getPathName firrtlFile}",
    "-td","{outputLoc}",
    "-ll","info",
    "--info-mode","ignore",
    "--compiler","verilog",
    "--split-modules",
    "-faf","{getPathName annoFile}",
    Nil
  
  runJava firrtlScalaModule.scalaModuleClasspath "firrtl.Driver" firrtlOptions (firrtlFile, annoFile, Nil) | getJobOutputs

